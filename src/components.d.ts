/* tslint:disable */
/**
 * This is an autogenerated file created by the Stencil compiler.
 * It contains typing information for all components that exist in this project.
 */


import '@stencil/core';




export namespace Components {

  interface PhBubble {
    'order': number;
    'resolved': boolean;
    'show': boolean;
    'toggleShow': () => void;
    'x': number;
    'y': number;
  }
  interface PhBubbleAttributes extends StencilHTMLAttributes {
    'onDropped'?: (event: CustomEvent) => void;
    'onMove'?: (event: CustomEvent) => void;
    'onStart'?: (event: CustomEvent) => void;
    'order'?: number;
    'resolved'?: boolean;
    'show'?: boolean;
    'x'?: number;
    'y'?: number;
  }

  interface PhButton {
    'size': string;
    /**
    * (optional) Button type - either primary, secondary or text.
    */
    'type': string;
  }
  interface PhButtonAttributes extends StencilHTMLAttributes {
    'size'?: string;
    /**
    * (optional) Button type - either primary, secondary or text.
    */
    'type'?: string;
  }

  interface PhDialog {
    'close': () => Promise<boolean>;
    /**
    * (optional) Title - string for the title of the dialog
    */
    'dialogTitle': string;
    /**
    * Visible - true or false
    */
    'visible': boolean;
  }
  interface PhDialogAttributes extends StencilHTMLAttributes {
    /**
    * (optional) Title - string for the title of the dialog
    */
    'dialogTitle'?: string;
    /**
    * Visible - true or false
    */
    'visible'?: boolean;
  }

  interface PhDot {
    'resolved': boolean;
  }
  interface PhDotAttributes extends StencilHTMLAttributes {
    'resolved'?: boolean;
  }

  interface PhEditor {}
  interface PhEditorAttributes extends StencilHTMLAttributes {}

  interface PhModal {
    'close': () => Promise<boolean>;
    /**
    * (optional) Title - string for the title of the dialog
    */
    'modalTitle': string;
    /**
    * Visible - true or false
    */
    'visible': boolean;
  }
  interface PhModalAttributes extends StencilHTMLAttributes {
    /**
    * (optional) Title - string for the title of the dialog
    */
    'modalTitle'?: string;
    /**
    * Visible - true or false
    */
    'visible'?: boolean;
  }

  interface PhPopover {
    'clickEvents': () => void;
    'clickOutSide': () => void;
    'closeDelay': number;
    'content': string;
    'handleMouseEnter': () => void;
    'handleMouseLeave': () => void;
    'hoverEvents': () => void;
    'initPopper': () => void;
    'openDelay': number;
    'placement': string;
    'trigger': string;
    'visible': boolean;
  }
  interface PhPopoverAttributes extends StencilHTMLAttributes {
    'closeDelay'?: number;
    'content'?: string;
    'onHide'?: (event: CustomEvent) => void;
    'onShow'?: (event: CustomEvent) => void;
    'openDelay'?: number;
    'placement'?: string;
    'trigger'?: string;
    'visible'?: boolean;
  }
}

declare global {
  interface StencilElementInterfaces {
    'PhBubble': Components.PhBubble;
    'PhButton': Components.PhButton;
    'PhDialog': Components.PhDialog;
    'PhDot': Components.PhDot;
    'PhEditor': Components.PhEditor;
    'PhModal': Components.PhModal;
    'PhPopover': Components.PhPopover;
  }

  interface StencilIntrinsicElements {
    'ph-bubble': Components.PhBubbleAttributes;
    'ph-button': Components.PhButtonAttributes;
    'ph-dialog': Components.PhDialogAttributes;
    'ph-dot': Components.PhDotAttributes;
    'ph-editor': Components.PhEditorAttributes;
    'ph-modal': Components.PhModalAttributes;
    'ph-popover': Components.PhPopoverAttributes;
  }


  interface HTMLPhBubbleElement extends Components.PhBubble, HTMLStencilElement {}
  var HTMLPhBubbleElement: {
    prototype: HTMLPhBubbleElement;
    new (): HTMLPhBubbleElement;
  };

  interface HTMLPhButtonElement extends Components.PhButton, HTMLStencilElement {}
  var HTMLPhButtonElement: {
    prototype: HTMLPhButtonElement;
    new (): HTMLPhButtonElement;
  };

  interface HTMLPhDialogElement extends Components.PhDialog, HTMLStencilElement {}
  var HTMLPhDialogElement: {
    prototype: HTMLPhDialogElement;
    new (): HTMLPhDialogElement;
  };

  interface HTMLPhDotElement extends Components.PhDot, HTMLStencilElement {}
  var HTMLPhDotElement: {
    prototype: HTMLPhDotElement;
    new (): HTMLPhDotElement;
  };

  interface HTMLPhEditorElement extends Components.PhEditor, HTMLStencilElement {}
  var HTMLPhEditorElement: {
    prototype: HTMLPhEditorElement;
    new (): HTMLPhEditorElement;
  };

  interface HTMLPhModalElement extends Components.PhModal, HTMLStencilElement {}
  var HTMLPhModalElement: {
    prototype: HTMLPhModalElement;
    new (): HTMLPhModalElement;
  };

  interface HTMLPhPopoverElement extends Components.PhPopover, HTMLStencilElement {}
  var HTMLPhPopoverElement: {
    prototype: HTMLPhPopoverElement;
    new (): HTMLPhPopoverElement;
  };

  interface HTMLElementTagNameMap {
    'ph-bubble': HTMLPhBubbleElement
    'ph-button': HTMLPhButtonElement
    'ph-dialog': HTMLPhDialogElement
    'ph-dot': HTMLPhDotElement
    'ph-editor': HTMLPhEditorElement
    'ph-modal': HTMLPhModalElement
    'ph-popover': HTMLPhPopoverElement
  }

  interface ElementTagNameMap {
    'ph-bubble': HTMLPhBubbleElement;
    'ph-button': HTMLPhButtonElement;
    'ph-dialog': HTMLPhDialogElement;
    'ph-dot': HTMLPhDotElement;
    'ph-editor': HTMLPhEditorElement;
    'ph-modal': HTMLPhModalElement;
    'ph-popover': HTMLPhPopoverElement;
  }


  export namespace JSX {
    export interface Element {}
    export interface IntrinsicElements extends StencilIntrinsicElements {
      [tagName: string]: any;
    }
  }
  export interface HTMLAttributes extends StencilHTMLAttributes {}

}
